// This file is auto-generated by @hey-api/openapi-ts

import {
  createClient,
  createConfig,
  type OptionsLegacyParser,
} from "@hey-api/client-fetch";
import type {
  HealthCheckHealthGetError,
  HealthCheckHealthGetResponse,
  V1GetMessagesError,
  V1GetMessagesResponse,
  V1GetAlertsError,
  V1GetAlertsResponse,
  V1StreamSseError,
  V1StreamSseResponse,
  V1VersionCheckError,
  V1VersionCheckResponse,
  V1ListWorkspacesError,
  V1ListWorkspacesResponse,
  V1CreateWorkspaceData,
  V1CreateWorkspaceError,
  V1CreateWorkspaceResponse,
  V1ListActiveWorkspacesError,
  V1ListActiveWorkspacesResponse,
  V1ActivateWorkspaceData,
  V1ActivateWorkspaceError,
  V1ActivateWorkspaceResponse,
  V1DeleteWorkspaceData,
  V1DeleteWorkspaceError,
  V1DeleteWorkspaceResponse,
  V1GetWorkspaceAlertsData,
  V1GetWorkspaceAlertsError,
  V1GetWorkspaceAlertsResponse,
  V1GetWorkspaceMessagesData,
  V1GetWorkspaceMessagesError,
  V1GetWorkspaceMessagesResponse,
} from "./types.gen";

export const client = createClient(createConfig());

/**
 * Health Check
 */
export const healthCheckHealthGet = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    HealthCheckHealthGetResponse,
    HealthCheckHealthGetError,
    ThrowOnError
  >({
    ...options,
    url: "/health",
  });
};

/**
 * Get Messages
 * Get all the messages from the database and return them as a list of conversations.
 */
export const v1GetMessages = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    V1GetMessagesResponse,
    V1GetMessagesError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v1/dashboard/messages",
  });
};

/**
 * Get Alerts
 * Get all the messages from the database and return them as a list of conversations.
 */
export const v1GetAlerts = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    V1GetAlertsResponse,
    V1GetAlertsError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v1/dashboard/alerts",
  });
};

/**
 * Stream Sse
 * Send alerts event
 */
export const v1StreamSse = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    V1StreamSseResponse,
    V1StreamSseError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v1/dashboard/alerts_notification",
  });
};

/**
 * Version Check
 */
export const v1VersionCheck = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    V1VersionCheckResponse,
    V1VersionCheckError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v1/dashboard/version",
  });
};

/**
 * List Workspaces
 * List all workspaces.
 */
export const v1ListWorkspaces = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    V1ListWorkspacesResponse,
    V1ListWorkspacesError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v1/workspaces",
  });
};

/**
 * Create Workspace
 * Create a new workspace.
 */
export const v1CreateWorkspace = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<V1CreateWorkspaceData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    V1CreateWorkspaceResponse,
    V1CreateWorkspaceError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v1/workspaces",
  });
};

/**
 * List Active Workspaces
 * List all active workspaces.
 *
 * In it's current form, this function will only return one workspace. That is,
 * the globally active workspace.
 */
export const v1ListActiveWorkspaces = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    V1ListActiveWorkspacesResponse,
    V1ListActiveWorkspacesError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v1/workspaces/active",
  });
};

/**
 * Activate Workspace
 * Activate a workspace by name.
 */
export const v1ActivateWorkspace = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<V1ActivateWorkspaceData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    V1ActivateWorkspaceResponse,
    V1ActivateWorkspaceError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v1/workspaces/active",
  });
};

/**
 * Delete Workspace
 * Delete a workspace by name.
 */
export const v1DeleteWorkspace = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<V1DeleteWorkspaceData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    V1DeleteWorkspaceResponse,
    V1DeleteWorkspaceError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v1/workspaces/{workspace_name}",
  });
};

/**
 * Get Workspace Alerts
 * Get alerts for a workspace.
 */
export const v1GetWorkspaceAlerts = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<V1GetWorkspaceAlertsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    V1GetWorkspaceAlertsResponse,
    V1GetWorkspaceAlertsError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v1/workspaces/{workspace_name}/alerts",
  });
};

/**
 * Get Workspace Messages
 * Get messages for a workspace.
 */
export const v1GetWorkspaceMessages = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<V1GetWorkspaceMessagesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    V1GetWorkspaceMessagesResponse,
    V1GetWorkspaceMessagesError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v1/workspaces/{workspace_name}/messages",
  });
};
