{
  "openapi": "3.1.0",
  "info": {
    "title": "CodeGate",
    "description": "Generative AI CodeGen security gateway",
    "version": "0.1.7"
  },
  "paths": {
    "/health": {
      "get": {
        "tags": [
          "System"
        ],
        "summary": "Health Check",
        "operationId": "health_check_health_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/api/v1/provider-endpoints": {
      "get": {
        "tags": [
          "CodeGate API",
          "Providers"
        ],
        "summary": "List Provider Endpoints",
        "description": "List all provider endpoints.",
        "operationId": "v1_list_provider_endpoints",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProviderEndpoint"
                  },
                  "title": "Response V1 List Provider Endpoints"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "CodeGate API",
          "Providers"
        ],
        "summary": "Add Provider Endpoint",
        "description": "Add a provider endpoint.",
        "operationId": "v1_add_provider_endpoint",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProviderEndpoint"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProviderEndpoint"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/provider-endpoints/{provider_id}": {
      "get": {
        "tags": [
          "CodeGate API",
          "Providers"
        ],
        "summary": "Get Provider Endpoint",
        "description": "Get a provider endpoint by ID.",
        "operationId": "v1_get_provider_endpoint",
        "parameters": [
          {
            "name": "provider_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Provider Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProviderEndpoint"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "CodeGate API",
          "Providers"
        ],
        "summary": "Update Provider Endpoint",
        "description": "Update a provider endpoint by ID.",
        "operationId": "v1_update_provider_endpoint",
        "parameters": [
          {
            "name": "provider_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Provider Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProviderEndpoint"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProviderEndpoint"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "CodeGate API",
          "Providers"
        ],
        "summary": "Delete Provider Endpoint",
        "description": "Delete a provider endpoint by id.",
        "operationId": "v1_delete_provider_endpoint",
        "parameters": [
          {
            "name": "provider_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Provider Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/provider-endpoints/{provider_name}/models": {
      "get": {
        "tags": [
          "CodeGate API",
          "Providers"
        ],
        "summary": "List Models By Provider",
        "description": "List models by provider.",
        "operationId": "v1_list_models_by_provider",
        "parameters": [
          {
            "name": "provider_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Provider Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ModelByProvider"
                  },
                  "title": "Response V1 List Models By Provider"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/provider-endpoints/models": {
      "get": {
        "tags": [
          "CodeGate API",
          "Providers"
        ],
        "summary": "List All Models For All Providers",
        "description": "List all models for all providers.",
        "operationId": "v1_list_all_models_for_all_providers",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ModelByProvider"
                  },
                  "type": "array",
                  "title": "Response V1 List All Models For All Providers"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/workspaces": {
      "get": {
        "tags": [
          "CodeGate API",
          "Workspaces"
        ],
        "summary": "List Workspaces",
        "description": "List all workspaces.",
        "operationId": "v1_list_workspaces",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListWorkspacesResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "CodeGate API",
          "Workspaces"
        ],
        "summary": "Create Workspace",
        "description": "Create a new workspace.",
        "operationId": "v1_create_workspace",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrRenameWorkspaceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Workspace"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/workspaces/active": {
      "get": {
        "tags": [
          "CodeGate API",
          "Workspaces"
        ],
        "summary": "List Active Workspaces",
        "description": "List all active workspaces.\n\nIn it's current form, this function will only return one workspace. That is,\nthe globally active workspace.",
        "operationId": "v1_list_active_workspaces",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListActiveWorkspacesResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "CodeGate API",
          "Workspaces"
        ],
        "summary": "Activate Workspace",
        "description": "Activate a workspace by name.",
        "operationId": "v1_activate_workspace",
        "parameters": [
          {
            "name": "status_code",
            "in": "query",
            "required": false,
            "schema": {
              "default": 204,
              "title": "Status Code"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActivateWorkspaceRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/workspaces/{workspace_name}": {
      "delete": {
        "tags": [
          "CodeGate API",
          "Workspaces"
        ],
        "summary": "Delete Workspace",
        "description": "Delete a workspace by name.",
        "operationId": "v1_delete_workspace",
        "parameters": [
          {
            "name": "workspace_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Workspace Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/workspaces/archive": {
      "get": {
        "tags": [
          "CodeGate API",
          "Workspaces"
        ],
        "summary": "List Archived Workspaces",
        "description": "List all archived workspaces.",
        "operationId": "v1_list_archived_workspaces",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListWorkspacesResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/workspaces/archive/{workspace_name}/recover": {
      "post": {
        "tags": [
          "CodeGate API",
          "Workspaces"
        ],
        "summary": "Recover Workspace",
        "description": "Recover an archived workspace by name.",
        "operationId": "v1_recover_workspace",
        "parameters": [
          {
            "name": "workspace_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Workspace Name"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/workspaces/archive/{workspace_name}": {
      "delete": {
        "tags": [
          "CodeGate API",
          "Workspaces"
        ],
        "summary": "Hard Delete Workspace",
        "description": "Hard delete an archived workspace by name.",
        "operationId": "v1_hard_delete_workspace",
        "parameters": [
          {
            "name": "workspace_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Workspace Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/workspaces/{workspace_name}/alerts": {
      "get": {
        "tags": [
          "CodeGate API",
          "Workspaces"
        ],
        "summary": "Get Workspace Alerts",
        "description": "Get alerts for a workspace.",
        "operationId": "v1_get_workspace_alerts",
        "parameters": [
          {
            "name": "workspace_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Workspace Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "anyOf": [
                      {
                        "$ref": "#/components/schemas/AlertConversation"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "title": "Response V1 Get Workspace Alerts"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/workspaces/{workspace_name}/messages": {
      "get": {
        "tags": [
          "CodeGate API",
          "Workspaces"
        ],
        "summary": "Get Workspace Messages",
        "description": "Get messages for a workspace.",
        "operationId": "v1_get_workspace_messages",
        "parameters": [
          {
            "name": "workspace_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Workspace Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Conversation"
                  },
                  "title": "Response V1 Get Workspace Messages"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/workspaces/{workspace_name}/custom-instructions": {
      "get": {
        "tags": [
          "CodeGate API",
          "Workspaces"
        ],
        "summary": "Get Workspace Custom Instructions",
        "description": "Get the custom instructions of a workspace.",
        "operationId": "v1_get_workspace_custom_instructions",
        "parameters": [
          {
            "name": "workspace_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Workspace Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomInstructions"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "CodeGate API",
          "Workspaces"
        ],
        "summary": "Set Workspace Custom Instructions",
        "operationId": "v1_set_workspace_custom_instructions",
        "parameters": [
          {
            "name": "workspace_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Workspace Name"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomInstructions"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "CodeGate API",
          "Workspaces"
        ],
        "summary": "Delete Workspace Custom Instructions",
        "operationId": "v1_delete_workspace_custom_instructions",
        "parameters": [
          {
            "name": "workspace_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Workspace Name"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/workspaces/{workspace_name}/muxes": {
      "get": {
        "tags": [
          "CodeGate API",
          "Workspaces",
          "Muxes"
        ],
        "summary": "Get Workspace Muxes",
        "description": "Get the mux rules of a workspace.\n\nThe list is ordered in order of priority. That is, the first rule in the list\nhas the highest priority.",
        "operationId": "v1_get_workspace_muxes",
        "parameters": [
          {
            "name": "workspace_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Workspace Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MuxRule"
                  },
                  "title": "Response V1 Get Workspace Muxes"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "CodeGate API",
          "Workspaces",
          "Muxes"
        ],
        "summary": "Set Workspace Muxes",
        "description": "Set the mux rules of a workspace.",
        "operationId": "v1_set_workspace_muxes",
        "parameters": [
          {
            "name": "workspace_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Workspace Name"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MuxRule"
                },
                "title": "Request"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/alerts_notification": {
      "get": {
        "tags": [
          "CodeGate API",
          "Dashboard"
        ],
        "summary": "Stream Sse",
        "description": "Send alerts event",
        "operationId": "v1_stream_sse",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/api/v1/version": {
      "get": {
        "tags": [
          "CodeGate API",
          "Dashboard"
        ],
        "summary": "Version Check",
        "operationId": "v1_version_check",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ActivateWorkspaceRequest": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "ActivateWorkspaceRequest"
      },
      "ActiveWorkspace": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active"
          },
          "last_updated": {
            "title": "Last Updated"
          }
        },
        "type": "object",
        "required": [
          "name",
          "is_active",
          "last_updated"
        ],
        "title": "ActiveWorkspace"
      },
      "AlertConversation": {
        "properties": {
          "conversation": {
            "$ref": "#/components/schemas/Conversation"
          },
          "alert_id": {
            "type": "string",
            "title": "Alert Id"
          },
          "code_snippet": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CodeSnippet"
              },
              {
                "type": "null"
              }
            ]
          },
          "trigger_string": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Trigger String"
          },
          "trigger_type": {
            "type": "string",
            "title": "Trigger Type"
          },
          "trigger_category": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Trigger Category"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Timestamp"
          }
        },
        "type": "object",
        "required": [
          "conversation",
          "alert_id",
          "code_snippet",
          "trigger_string",
          "trigger_type",
          "trigger_category",
          "timestamp"
        ],
        "title": "AlertConversation",
        "description": "Represents an alert with it's respective conversation."
      },
      "ChatMessage": {
        "properties": {
          "message": {
            "type": "string",
            "title": "Message"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Timestamp"
          },
          "message_id": {
            "type": "string",
            "title": "Message Id"
          }
        },
        "type": "object",
        "required": [
          "message",
          "timestamp",
          "message_id"
        ],
        "title": "ChatMessage",
        "description": "Represents a chat message."
      },
      "CodeSnippet": {
        "properties": {
          "code": {
            "type": "string",
            "title": "Code"
          },
          "language": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Language"
          },
          "filepath": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Filepath"
          },
          "libraries": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Libraries"
          }
        },
        "type": "object",
        "required": [
          "code",
          "language",
          "filepath"
        ],
        "title": "CodeSnippet"
      },
      "Conversation": {
        "properties": {
          "question_answers": {
            "items": {
              "$ref": "#/components/schemas/QuestionAnswer"
            },
            "type": "array",
            "title": "Question Answers"
          },
          "provider": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Provider"
          },
          "type": {
            "$ref": "#/components/schemas/QuestionType"
          },
          "chat_id": {
            "type": "string",
            "title": "Chat Id"
          },
          "conversation_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Conversation Timestamp"
          }
        },
        "type": "object",
        "required": [
          "question_answers",
          "provider",
          "type",
          "chat_id",
          "conversation_timestamp"
        ],
        "title": "Conversation",
        "description": "Represents a conversation."
      },
      "CreateOrRenameWorkspaceRequest": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "rename_to": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Rename To"
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "CreateOrRenameWorkspaceRequest"
      },
      "CustomInstructions": {
        "properties": {
          "prompt": {
            "type": "string",
            "title": "Prompt"
          }
        },
        "type": "object",
        "required": [
          "prompt"
        ],
        "title": "CustomInstructions"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "ListActiveWorkspacesResponse": {
        "properties": {
          "workspaces": {
            "items": {
              "$ref": "#/components/schemas/ActiveWorkspace"
            },
            "type": "array",
            "title": "Workspaces"
          }
        },
        "type": "object",
        "required": [
          "workspaces"
        ],
        "title": "ListActiveWorkspacesResponse"
      },
      "ListWorkspacesResponse": {
        "properties": {
          "workspaces": {
            "items": {
              "$ref": "#/components/schemas/Workspace"
            },
            "type": "array",
            "title": "Workspaces"
          }
        },
        "type": "object",
        "required": [
          "workspaces"
        ],
        "title": "ListWorkspacesResponse"
      },
      "ModelByProvider": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "provider": {
            "type": "string",
            "title": "Provider"
          }
        },
        "type": "object",
        "required": [
          "name",
          "provider"
        ],
        "title": "ModelByProvider",
        "description": "Represents a model supported by a provider.\n\nNote that these are auto-discovered by the provider."
      },
      "MuxMatcherType": {
        "type": "string",
        "enum": [
          "file_regex",
          "catch_all"
        ],
        "title": "MuxMatcherType",
        "description": "Represents the different types of matchers we support."
      },
      "MuxRule": {
        "properties": {
          "provider": {
            "type": "string",
            "title": "Provider"
          },
          "model": {
            "type": "string",
            "title": "Model"
          },
          "matcher_type": {
            "$ref": "#/components/schemas/MuxMatcherType"
          },
          "matcher": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Matcher"
          }
        },
        "type": "object",
        "required": [
          "provider",
          "model",
          "matcher_type",
          "matcher"
        ],
        "title": "MuxRule",
        "description": "Represents a mux rule for a provider."
      },
      "ProviderAuthType": {
        "type": "string",
        "enum": [
          "none",
          "passthrough",
          "api_key"
        ],
        "title": "ProviderAuthType",
        "description": "Represents the different types of auth we support for providers."
      },
      "ProviderEndpoint": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "default": ""
          },
          "provider_type": {
            "$ref": "#/components/schemas/ProviderType"
          },
          "endpoint": {
            "type": "string",
            "title": "Endpoint"
          },
          "auth_type": {
            "$ref": "#/components/schemas/ProviderAuthType"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "provider_type",
          "endpoint",
          "auth_type"
        ],
        "title": "ProviderEndpoint",
        "description": "Represents a provider's endpoint configuration. This\nallows us to persist the configuration for each provider,\nso we can use this for muxing messages."
      },
      "ProviderType": {
        "type": "string",
        "enum": [
          "openai",
          "anthropic",
          "vllm"
        ],
        "title": "ProviderType",
        "description": "Represents the different types of providers we support."
      },
      "QuestionAnswer": {
        "properties": {
          "question": {
            "$ref": "#/components/schemas/ChatMessage"
          },
          "answer": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ChatMessage"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "question",
          "answer"
        ],
        "title": "QuestionAnswer",
        "description": "Represents a question and answer pair."
      },
      "QuestionType": {
        "type": "string",
        "enum": [
          "chat",
          "fim"
        ],
        "title": "QuestionType"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      },
      "Workspace": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active"
          }
        },
        "type": "object",
        "required": [
          "name",
          "is_active"
        ],
        "title": "Workspace"
      }
    }
  }
}
